<!--
Copyright 2007-2012 Comdiv (F. Sadykov) - http://code.google.com/u/fagim.sadykov/
Supported by Media Technology LTD 
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<Project ToolsVersion="4.0" DefaultTargets="CreateProject;MakeReferences" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="MSBuild.Community.Tasks.Targets"/>
  <PropertyGroup>
	<RefOnly>False</RefOnly>
	<Name></Name>
	<Package></Package>
	<Imports></Imports>
	<TestImports></TestImports>
    <RootNs>$(Package)</RootNs>
    <Namespace>$(RootNs).$(Name)</Namespace>
    <AssemblyName>$(RootNs).$(Name)</AssemblyName>
    <TestAssemblyName>$(AssemblyName).Tests</TestAssemblyName>
    <RootDir>..\$(Package)</RootDir>
    <ProjectDir>$(RootDir)\$(AssemblyName)</ProjectDir>
    <TestProjectDir>$(RootDir)\$(TestAssemblyName)</TestProjectDir>
    <ProjectDirProps>$(ProjectDir)\Properties</ProjectDirProps>
    <TestProjectDirProps>$(TestProjectDir)\Properties</TestProjectDirProps>
    <ProjectFile>$(ProjectDir)\$(AssemblyName).csproj</ProjectFile>
    <ProjectExportFile>$(ProjectDir)\$(AssemblyName).export</ProjectExportFile>
    <TestProjectFile>$(TestProjectDir)\$(TestAssemblyName).csproj</TestProjectFile>

	<Template Condition="'$(Template)'==''">csproj-template</Template>
  </PropertyGroup>
 
  <ItemGroup>
    <Import Include="$(Imports)" />
	<TestImport Include="$(TestImports)" />
	<Export Include="..\**\*.export" />
  </ItemGroup>
  
  

  <Target Name="CreateProject">

	<Error Condition="'$(Package)'==''" Text="Package not defined"/>
	<Error Condition="!Exists('$(RootDir)')" Text="Package not exists"/>
	<Error Condition="'$(RootNs)'==''" Text="Root namespace not defined"/>
	<Error Condition="'$(Name)'==''" Text="Name not defined"/>
	<Error Condition="!$(RefOnly) and Exists('$(ProjectDir)')" Text="Project already existed"/>
	<Error Condition="!$(RefOnly) and Exists('$(TestProjectDir)')" Text="Test project already existed"/>
	
	
	

    <PropertyGroup>
      <GuidGenFunction>
        <![CDATA[ 
      public static string ScriptMain() { 
          return System.Guid.NewGuid().ToString().ToUpper(); 
      } 
      ]]>
      </GuidGenFunction>
    </PropertyGroup>
    <Script Language="C#" Code="$(GuidGenFunction)">
      <Output TaskParameter="ReturnValue" PropertyName="GUID1" />
    </Script>
    <Script Language="C#" Code="$(GuidGenFunction)">
      <Output TaskParameter="ReturnValue" PropertyName="GUID2" />
    </Script>
    <Message Text="Create folder structure"/>

    <MakeDir Directories="$(ProjectDir)"/>
    <MakeDir Directories="$(TestProjectDir)"/>
    <MakeDir Directories="$(TestProjectDirProps)"/>


    <Message Text="Copy project and export files"/>
    <Copy Condition="!$(RefOnly)" SourceFiles="$(Template)\LIBRARY.csproj" DestinationFiles="$(ProjectDir)\$(AssemblyName).csproj"/>
    <Copy Condition="!$(RefOnly)" SourceFiles="$(Template)\TESTLIBRARY.csproj" DestinationFiles="$(TestProjectDir)\$(TestAssemblyName).csproj"/>
    <Copy Condition="!$(RefOnly)" SourceFiles="$(Template)\LIBRARY.export" DestinationFiles="$(ProjectDir)\$(AssemblyName).export"/>
    
    <Message Text="Prepare prject files"/>
    <FileUpdate Condition="!$(RefOnly)" Files="$(ProjectFile);$(ProjectExportFile)" Regex="@NAME@" ReplacementText="$(AssemblyName)" />
    <FileUpdate Condition="!$(RefOnly)" Files="$(ProjectFile)" Regex="@GUID@" ReplacementText="$(GUID1)" />
    <FileUpdate Condition="!$(RefOnly)" Files="$(TestProjectFile)" Regex="@GUID@" ReplacementText="$(GUID2)" />
    <FileUpdate Condition="!$(RefOnly)" Files="$(TestProjectFile)" Regex="@NAME@" ReplacementText="$(TestAssemblyName)" />
    <FileUpdate Condition="!$(RefOnly)" Files="$(ProjectFile);$(ProjectExportFile);$(TestProjectFile)" Regex="@NAMESPACE@" ReplacementText="$(Namespace)" />
	<FileUpdate Condition="!$(RefOnly)" Files="$(ProjectFile);$(ProjectExportFile);$(TestProjectFile)" Regex="@PACKAGE@" ReplacementText="$(Package)" />

	

	
  </Target>


	
	<Target Name="MakeReferences">
		<Copy SourceFiles="missed._export" DestinationFiles="$(ProjectDir)\%(Import.identity).import"  Condition="'%(Import.identity)'!=''"/>
		<Copy SourceFiles="missed._export" DestinationFiles="$(TestProjectDir)\%(TestImport.identity).import"  Condition="'%(TestImport.identity)'!=''"/>
	
		<Copy SourceFiles="@(Export)" DestinationFiles="$(ProjectDir)\%(Export.filename).import" Condition="Exists('$(ProjectDir)\%(Export.filename).import')" />
		<Copy SourceFiles="stub" DestinationFiles="$(ProjectDir)\%(Export.filename).import-check" Condition="Exists('$(ProjectDir)\%(Export.filename).import')" />

		<Copy SourceFiles="@(Export)" DestinationFiles="$(TestProjectDir)\%(Export.filename).import" Condition="Exists('$(TestProjectDir)\%(Export.filename).import')" />
		<Copy SourceFiles="stub" DestinationFiles="$(TestProjectDir)\%(Export.filename).import-check" Condition="Exists('$(TestProjectDir)\%(Export.filename).import')" />
		<CreateItem Include="$(ProjectDir)\*.import;$(TestProjectDir)\*.import" >
			<Output TaskParameter="Include" ItemName="CreatedImport"/>
		</CreateItem>
		<CreateItem Include="$(ProjectDir)\*.import-check;$(TestProjectDir)\*.import-check" >
			<Output TaskParameter="Include" ItemName="ImportCheck"/>
		</CreateItem>
		<Warning Text="UNRESOLVED: %(CreatedImport.fullpath)" Condition="!Exists('%(CreatedImport.fullpath)-check')"/>
	</Target>

</Project>
	